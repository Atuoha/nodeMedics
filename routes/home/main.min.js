'use strict';const express=require("express"),app=express(),router=express.Router(),User=require("../../models/User"),bcrypt=require("bcryptjs"),passport=require("passport"),LocalStrategy=require("passport-local").Strategy;router.all("/*",(a,b,c)=>{a.app.locals.layout="home";c()});router.get("/",(a,b)=>{b.render("home")});router.get("/login",(a,b)=>{a.user?b.redirect("/admin"):b.render("home/login")});router.get("/register",(a,b)=>{a.user?b.redirect("/admin"):b.render("home/register")});
router.post("/register",(a,b)=>{User.findOne({email:a.body.email}).then(c=>{if(c)a.flash("error_msg","Email already exists :) "),b.redirect("/register");else{const d=new User;d.name=a.body.name;d.email=a.body.email;d.password=a.body.password;bcrypt.genSalt(10,(e,f)=>{bcrypt.hash(a.body.password,f,(g,k)=>{g&&console.log(g);d.password=k;d.save().then(h=>{a.flash("success_msg","Account Registered successfully. Login :)");b.redirect("/login")}).catch(h=>console.log(`Issues with saving user: ${h}`))})})}}).catch(c=>
console.log(`Issues: ${c}`))});passport.use(new LocalStrategy({usernameField:"email"},(a,b,c)=>{console.log(`Email: ${a} | Password: ${b}`);User.findOne({email:a}).then(d=>{if(d)bcrypt.compare(b,d.password,(e,f)=>{e&&console.log(e);return f?c(null,d):c(null,!1,{message:"Password mismatch. Try again!"})});else return console.log("Not recognised"),c(null,!1,{message:"Email not recognised!"})}).catch(d=>console.log(`iSSues: ${d}`))}));passport.serializeUser(function(a,b){b(null,a.id)});
passport.deserializeUser(function(a,b){User.findById(a,function(c,d){b(c,d)})});router.post("/login",(a,b,c)=>{passport.authenticate("local",{successRedirect:"/admin",failureRedirect:"/login",failureFlash:!0})(a,b,c)});router.get("/logout",(a,b)=>{a.logout();b.redirect("/")});module.exports=router;